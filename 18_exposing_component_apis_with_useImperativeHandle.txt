// Exposing Component APIs with useImperativeHandle with TypeScript

App.tsx
--------
import { useRef } from "react";
import Button from "./components/Button";
import Form, { FormHandle } from "./components/Form";
import Input from "./components/Input";

function App() {
  const customForm = useRef<FormHandle>(null);

  const handleSave = (data: unknown) => {
    const extractedData = data as {
      name: string;
      age: string;
    };
    console.log(extractedData);
    customForm.current?.clear();
  };
  return (
    <main>
      <Form onSave={handleSave} ref={customForm}>
        <Input label="name" id="name" type="text" />
        <Input label="age" id="age" type="number" />
        <p>
          <Button>Save</Button>
        </p>
      </Form>
    </main>
  );
}

export default App;


components/Form.tsx
-------------------
import {
  forwardRef,
  useImperativeHandle,
  useRef,
  type ComponentPropsWithoutRef,
  type FormEvent,
} from "react";

export type FormHandle = {
  clear: () => void;
}; // this type should describe object return by use useImperativeHandle

type FormProps = ComponentPropsWithoutRef<"form"> & {
  onSave: (value: unknown) => void;
};

const Form = forwardRef<FormHandle, FormProps>(
  ({ onSave, children, ...otherProps }: FormProps, ref) => {
    const form = useRef<HTMLFormElement>(null);

    useImperativeHandle(ref, () => {
      return {
        clear() {
          console.log("clearing the form");
          form.current?.reset();
        },
      };
    }); // useImperativeHandle only works in component that recieves forwardRef
    // here, clear() method can be called outside of this component

    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
      event.preventDefault();

      const formData = new FormData(event.currentTarget);
      const data = Object.fromEntries(formData);

      onSave(data);
    };
    return (
      <form onSubmit={handleSubmit} {...otherProps}>
        {children}
      </form>
    );
  }
);

export default Form;
